#Подключение модулей
import pandas as pd
from matplotlib import pyplot as plt
from tensorflow.keras.layers import Dense, Masking, Input
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
#Загрузка данных
dataframe = pd.read_csv("iris.csv", header=None)
dataset = dataframe.values
X = dataset[:,0:4].astype(float)
Y = dataset[:,4]
#Переход от текстовых меток к категориальному вектору
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
dummy_y = to_categorical(encoded_Y)
#Теперь можно задать базовую архитектуру сети
model1 = Sequential()
model1.add(Dense(4, activation='relu'))
model1.add(Dense(3, activation='softmax'))
#Инициализация параметров обучения
model1.compile(optimizer='adam',loss='categorical_crossentropy',
metrics=['accuracy'])
#Обучение сети
model1.fit(X, dummy_y, epochs=75, batch_size=10,
validation_split=0.1)
#Задаём графики точности и потери от эпох
history = model1.fit(X, dummy_y,validation_split = 0.1, epochs=75, batch_size=10)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model 1')
plt.ylabel('Точность (accuracy)')
plt.xlabel('Эпохи (epoch)')
plt.legend(['train', 'val'], loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model 1')
plt.ylabel('Потери (loss)')
plt.xlabel('Эпохи (epoch)')
plt.legend(['train', 'val'], loc='upper left')
plt.show()
#Аналогично задаём вторую модель, изменяя слои и параметры обучения
model2 = Sequential()
model2.add(Dense(4, activation= 'gelu'))
model2.add(Dense(3, activation='softmax'))
model2.add(Masking(mask_value = 2.0, input_shape = (10,8)))
model2.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy'])
model2.fit(X, dummy_y, epochs=100, batch_size=20,validation_split=0.01)
history = model2.fit(X, dummy_y,validation_split = 0.01, epochs=100, batch_size=20)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model 2')
plt.ylabel('Точность (accuracy)')
plt.xlabel('Эпохи (epoch)')
plt.legend(['train', 'val'], loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model 2')
plt.ylabel('Потери (loss)')
plt.xlabel('Эпохи (epoch)')
plt.legend(['train', 'val'], loc='upper left')
plt.show()
#Аналогично задаём третью модель, изменяя слои и параметры обучения
model3 = Sequential()
model3.add(Dense(4, activation= 'gelu'))
model3.add(Dense(3, activation='softmax'))
model3.add(Masking(mask_value = 3.0, input_shape = (10,8)))
model3.add(Input(shape = (32,)))
model3.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy'])
model3.fit(X, dummy_y, epochs=150, batch_size=50,validation_split=0.1)
history = model3.fit(X, dummy_y,validation_split = 0.1, epochs=150, batch_size=50) 
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model 3')
plt.ylabel('Точность (accuracy)')
plt.xlabel('Эпохи (epoch)')
plt.legend(['train', 'val'], loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model 3')
plt.ylabel('Потери (loss)')
plt.xlabel('Эпохи (epoch)')
plt.legend(['train', 'val'], loc='upper left')
plt.show()